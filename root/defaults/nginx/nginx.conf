user abc;
daemon off;
pid /run/nginx.pid;
worker_processes auto;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules-enabled/*.conf;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 10000;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4096;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    # multi_accept on;
}

http {
    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 60;
    types_hash_max_size 2048;
    server_tokens off;

    # server_name_in_redirect off;
    # server_names_hash_bucket_size 64;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size  256k;
    # headerbuffer size for the request header from client -- for testing environment
    client_header_buffer_size 3m;
    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 8 256k;
    # Faster resolving, improves stapling time. Timeout and nameservers may need to be adjusted for your location Google's have been used here.
    resolver 1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout 10s;

    ##
    # Proxy Settings
    ##

    # Buffering off send to the client as soon as the data is received
    proxy_redirect off;
    proxy_buffering off;
    # Timeout Settings
    proxy_read_timeout 1800;
    proxy_connect_timeout 1800;
    proxy_send_timeout 1800;

    ##
    # SSL Settings
    ##

    ssl_session_tickets on;
    ssl_protocols TLSv1.2 TLSv1.3;  # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_disable "MSIE [1-6]\.";

    ##
    # NGINX Simple DDoS Defense
    ##

    # limit the number of connections per single IP
    # limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # limit the number of requests for a given session
    # limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # # zone which we want to limit by upper values, we want limit whole server
    # server {
    #     limit_conn conn_limit_per_ip 10;
    #     limit_req zone=req_limit_per_ip burst=10 nodelay;
    # }

    ##
    # Virtual Host Configs
    ##

    include /etc/nginx/sites-enabled/*;
}
